using System.Text.Json;
using CodexBootstrap.Core;

namespace CodexBootstrap.Modules;

public sealed class HelloModule : IModule, IOpenApiProvider
{
    private NodeRegistry? _registry;

    public Node GetModuleNode()
    {
        return NodeStorage.CreateModuleNode(
            id: "codex.hello",
            name: "Hello Demo Module",
            version: "0.1.0",
            description: "Shows dynamic API registration, type exposure, and node creation."
        );
    }

    public object GetOpenApiSpec()
    {
        if (_registry == null)
        {
            return new { error = "Registry not available" };
        }

        var moduleNode = GetModuleNode();
        return OpenApiHelper.GenerateOpenApiSpec("codex.hello", moduleNode, _registry);
    }

    public void Register(NodeRegistry registry)
    {
        _registry = registry; // Store registry reference for OpenAPI generation
        
        // Register API nodes
        var echoApi = NodeStorage.CreateApiNode("codex.hello", "echo", "/route", "Echos args back");
        var helloApi = NodeStorage.CreateApiNode("codex.hello", "hello", "/route", "Greets and returns a node id");
        
        registry.Upsert(echoApi);
        registry.Upsert(helloApi);
        
        // Register edges
        registry.Upsert(NodeStorage.CreateModuleApiEdge("codex.hello", "echo"));
        registry.Upsert(NodeStorage.CreateModuleApiEdge("codex.hello", "hello"));
    }

    public void RegisterApiHandlers(IApiRouter router, NodeRegistry registry)
    {
        router.Register("codex.hello", "echo", args => Task.FromResult<object>(args ?? new object()));

        router.Register("codex.hello", "hello", args =>
        {
            var name = args is { } a && a.TryGetProperty("name", out var n) ? n.GetString() : "world";
            var node = new Node(
                Id: Guid.NewGuid().ToString(),
                TypeId: "codex.hello/greeter",
                State: ContentState.Gas,
                Locale: "en",
                Title: $"Hello {name}",
                Description: $"Autogenerated hello node for {name}.",
                Content: new ContentRef(
                    MediaType: "text/plain",
                    InlineJson: $"Hello {name}",
                    InlineBytes: null,
                    ExternalUri: null
                ),
                Meta: new() { ["createdBy"] = "codex.hello" }
            );
            registry.Upsert(node);
            return Task.FromResult<object>(new SuccessResponse($"Hello, {name}! NodeId={node.Id}"));
        });
    }
}
