using System.Text.Json;
using CodexBootstrap.Core;
using CodexBootstrap.Runtime;

namespace CodexBootstrap.Modules;

/// <summary>
/// Hello Demo Module - Shows dynamic API registration, type exposure, and node creation
/// </summary>
[ApiModule(Name = "HelloModule", Version = "0.1.0", Description = "Hello Demo Module - Shows dynamic API registration, type exposure, and node creation", Tags = new[] { "hello", "demo", "example" })]
public sealed class HelloModule : ModuleBase
{
    public override string Name => "Hello Demo Module";
    public override string Description => "Shows dynamic API registration, type exposure, and node creation.";
    public override string Version => "0.1.0";

    public HelloModule(INodeRegistry registry, ICodexLogger logger, HttpClient httpClient) 
        : base(registry, logger)
    {
    }

    public override Node GetModuleNode()
    {
        return CreateModuleNode(
            moduleId: "codex.hello",
            name: Name,
            version: Version,
            description: Description,
            tags: new[] { "hello", "demo", "example" },
            capabilities: new[] { "echo", "greeting", "node-creation" },
            spec: "codex.spec.hello"
        );
    }

    public override void RegisterApiHandlers(IApiRouter router, INodeRegistry registry)
    {
        // API handlers are now registered via attribute-based routing
    }

    public override void RegisterHttpEndpoints(WebApplication app, INodeRegistry registry, CoreApiService coreApi, ModuleLoader moduleLoader)
    {
        // HTTP endpoints are now registered via attribute-based routing
    }

    /// <summary>
    /// Echo endpoint - returns the input arguments
    /// </summary>
    [ApiRoute("POST", "/hello/echo", "echo", "Echos args back", "codex.hello")]
    public async Task<object> EchoAsync([ApiParameter("body", "Input arguments")] JsonElement? args)
    {
        return await Task.FromResult<object>(args ?? new object());
    }

    /// <summary>
    /// Hello endpoint - greets and creates a node
    /// </summary>
    [ApiRoute("POST", "/hello/greet", "hello", "Greets and returns a node id", "codex.hello")]
    public async Task<object> HelloAsync([ApiParameter("body", "Greeting request")] HelloRequest request)
    {
        var name = request?.Name ?? "world";
        var node = new Node(
            Id: Guid.NewGuid().ToString(),
            TypeId: "codex.hello/greeter",
            State: ContentState.Gas,
            Locale: "en",
            Title: $"Hello {name}",
            Description: $"Autogenerated hello node for {name}.",
            Content: new ContentRef(
                MediaType: "text/plain",
                InlineJson: $"Hello {name}",
                InlineBytes: null,
                ExternalUri: null
            ),
            Meta: new() { ["createdBy"] = "codex.hello" }
        );
        _registry.Upsert(node);
        return await Task.FromResult<object>(new SuccessResponse($"Hello, {name}! NodeId={node.Id}"));
    }

    /// <summary>
    /// Hot-reload test endpoint - added to test module reloading
    /// </summary>
    [ApiRoute("GET", "/hello/hot-reload-test", "hot-reload-test", "Tests hot-reload functionality", "codex.hello")]
    public async Task<object> HotReloadTestAsync()
    {
        return await Task.FromResult<object>(new {
            message = "Hot-reload test endpoint - successfully reloaded!",
            timestamp = DateTime.UtcNow,
            version = "1.0.1"
        });
    }
}

/// <summary>
/// Hello request model
/// </summary>
[ResponseType("codex.hello.request", "HelloRequest", "Request for hello greeting")]
public record HelloRequest(string? Name = null);
