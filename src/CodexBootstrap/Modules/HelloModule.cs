using System.Text.Json;
using CodexBootstrap.Core;
using CodexBootstrap.Runtime;

namespace CodexBootstrap.Modules;

public sealed class HelloModule : IModule
{
    public ModuleSpec Spec => new(
        Id: "codex.hello",
        Version: "0.1.0",
        Name: "Hello Demo Module",
        Description: "Shows dynamic API registration, type exposure, and node creation.",
        Dependencies: new[] { new ModuleRef("codex.core", "0.1.0") },
        Types: new[]
        {
            new TypeSpec("HelloRequest","object", new() { ["name"] = new("name","string") }),
            new TypeSpec("HelloResponse","object", new() { ["message"] = new("message","string") })
        },
        Apis: new[]
        {
            new ApiSpec("echo","/route","Echos args back", new("Any","object"), new("Any","object")),
            new ApiSpec("hello","/route","Greets and returns a node id", new("HelloRequest","ref", Ref:"HelloRequest"), new("HelloResponse","ref", Ref:"HelloResponse"))
        }
    );

    public void Register(IApiRouter router, IRegistry registry)
    {
        router.Register(Spec.Id, "echo", args => Task.FromResult<object?>(args));

        router.Register(Spec.Id, "hello", args =>
        {
            var name = args is { } a && a.TryGetProperty("name", out var n) ? n.GetString() : "world";
            var node = new Node(
                Id: Guid.NewGuid().ToString(),
                TypeId: "codex.hello/greeter",
                State: ContentState.Gas,
                Locale: "en",
                Title: $"Hello {name}",
                Description: $"Autogenerated hello node for {name}.",
                Content: null,
                Meta: new() { ["createdBy"] = Spec.Id }
            );
            registry.Upsert(node);
            return Task.FromResult<object?>(new { message = $"Hello, {name}! NodeId={node.Id}" });
        });
    }
}
