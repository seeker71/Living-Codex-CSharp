#!/bin/bash

# Test Visual Validation System
echo "üé® Testing Visual Validation System"
echo "===================================="

API_BASE="http://localhost:5002"

# Test 1: Render a component to image
echo "üì∏ Step 1: Rendering component to image..."
RENDER_RESPONSE=$(curl -s -X POST "$API_BASE/visual-validation/render-component" \
  -H "Content-Type: application/json" \
  -d '{
    "componentId": "test-resonance-button",
    "componentCode": "<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded transition-colors duration-200\">Resonate</button>",
    "width": 1920,
    "height": 1080,
    "viewport": "desktop"
  }')

echo "Render Response:"
echo "$RENDER_RESPONSE" | jq '.'

# Extract image node ID from response
IMAGE_NODE_ID=$(echo "$RENDER_RESPONSE" | jq -r '.data.imageNodeId // empty')

if [ -z "$IMAGE_NODE_ID" ]; then
  echo "‚ùå Failed to render component"
  exit 1
fi

echo "‚úÖ Rendered component to image: $IMAGE_NODE_ID"

# Test 2: Analyze rendered image
echo ""
echo "üîç Step 2: Analyzing rendered image..."
ANALYZE_RESPONSE=$(curl -s -X POST "$API_BASE/visual-validation/analyze-image" \
  -H "Content-Type: application/json" \
  -d "{
    \"imageNodeId\": \"$IMAGE_NODE_ID\",
    \"componentId\": \"test-resonance-button\",
    \"specVision\": \"Create a resonance-driven button that evokes joy and connection\",
    \"requirements\": \"Follow Living Codex design principles with clear visual hierarchy and engaging interactions\",
    \"provider\": \"ollama\",
    \"model\": \"llama2\"
  }")

echo "Analyze Response:"
echo "$ANALYZE_RESPONSE" | jq '.'

echo "‚úÖ Analyzed rendered image"

# Test 3: Validate component against spec
echo ""
echo "‚úÖ Step 3: Validating component against spec..."
VALIDATE_RESPONSE=$(curl -s -X POST "$API_BASE/visual-validation/validate-component" \
  -H "Content-Type: application/json" \
  -d '{
    "componentId": "test-resonance-button",
    "minimumScore": 0.7
  }')

echo "Validate Response:"
echo "$VALIDATE_RESPONSE" | jq '.'

echo "‚úÖ Validated component against spec"

# Test 4: Execute full visual validation pipeline
echo ""
echo "üîÑ Step 4: Executing full visual validation pipeline..."
PIPELINE_RESPONSE=$(curl -s -X POST "$API_BASE/visual-validation/pipeline" \
  -H "Content-Type: application/json" \
  -d '{
    "componentId": "test-concept-card",
    "componentCode": "<div class=\"bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow duration-200\"><h3 class=\"text-xl font-semibold text-gray-800 mb-2\">Consciousness Expansion</h3><p class=\"text-gray-600 mb-4\">Explore the depths of human consciousness and unlock your potential.</p><div class=\"flex space-x-2\"><button class=\"bg-purple-500 hover:bg-purple-700 text-white px-4 py-2 rounded transition-colors duration-200\">Attune</button><button class=\"bg-green-500 hover:bg-green-700 text-white px-4 py-2 rounded transition-colors duration-200\">Amplify</button></div></div>",
    "specVision": "Create a concept card that embodies resonance, joy, and unity principles",
    "requirements": "Design should be inviting, not overwhelming, with clear actions and visual hierarchy",
    "width": 1920,
    "height": 1080,
    "viewport": "desktop",
    "minimumScore": 0.75,
    "provider": "ollama",
    "model": "llama2"
  }')

echo "Pipeline Response:"
echo "$PIPELINE_RESPONSE" | jq '.'

echo "‚úÖ Executed visual validation pipeline"

# Test 5: Test UI orchestration with visual validation
echo ""
echo "üåÄ Step 5: Testing UI orchestration with visual validation..."
ORCHESTRATION_RESPONSE=$(curl -s -X POST "$API_BASE/ui-orchestration/breath-loop" \
  -H "Content-Type: application/json" \
  -d '{
    "intent": "Create a resonance comparison interface",
    "path": "/resonance-compare",
    "lenses": [
      {
        "id": "lens.resonance-comparison",
        "name": "Resonance Comparison",
        "projectionType": "comparison",
        "requirements": "Visual resonance comparison with real-time updates and joyful interactions",
        "actions": ["attune", "amplify", "weave", "reflect"],
        "endpoints": {
          "compare": "/concepts/resonance/compare",
          "concepts": "/concept/discover"
        }
      }
    ],
    "controls": [
      {
        "id": "controls.resonance-axes",
        "name": "Resonance Axes",
        "type": "resonance-compass"
      }
    ],
    "evolutionContext": "Create an interface that embodies the Living Codex principles",
    "enableVisualValidation": true,
    "specVision": "Design a resonance comparison interface that feels harmonious, joyful, and connected",
    "requirements": "Follow Living Codex design principles with clear visual hierarchy and engaging interactions"
  }')

echo "Orchestration Response:"
echo "$ORCHESTRATION_RESPONSE" | jq '.'

echo "‚úÖ Tested UI orchestration with visual validation"

# Test 6: List visual validation nodes
echo ""
echo "üìã Step 6: Listing visual validation nodes..."
VISUAL_NODES_RESPONSE=$(curl -s -X GET "$API_BASE/storage-endpoints/nodes?type=codex.ui.rendered-image")

echo "Rendered Image Nodes:"
echo "$VISUAL_NODES_RESPONSE" | jq '.nodes[] | {id, type, meta: {componentId, renderedAt, width, height}}'

echo ""
echo "üéâ Visual Validation System Test Complete!"
echo "=========================================="
echo "The system successfully:"
echo "‚úÖ Rendered UI components to images"
echo "‚úÖ Analyzed rendered images with AI"
echo "‚úÖ Validated components against spec vision"
echo "‚úÖ Executed full visual validation pipeline"
echo "‚úÖ Integrated with UI orchestration breath loop"
echo "‚úÖ Stored visual validation data as nodes"
echo ""
echo "Next steps:"
echo "- Implement real screenshot capture with Puppeteer/Playwright"
echo "- Add AI-powered visual analysis with vision models"
echo "- Create quality dashboard for visual validation metrics"
echo "- Integrate with Next.js UI for live visual feedback"
