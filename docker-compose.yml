version: '3.8'

services:
  # Living Codex API Service
  living-codex-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: living-codex-api
    ports:
      - "5002:5000"
      - "5003:5001"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5000
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=livingcodex;Username=postgres;Password=postgres
      - ConnectionStrings__Redis=redis:6379
      - ConnectionStrings__RabbitMQ=amqp://guest:guest@rabbitmq:5672
      - JWT_SECRET=your-super-secret-jwt-key-that-should-be-32-characters-long
      - ENCRYPTION_KEY=your-32-character-encryption-key-here
      - OLLAMA_BASE_URL=http://ollama:11434
      - LOG_LEVEL=Information
    volumes:
      - ./src:/app/src
      - ./specs:/app/specs
      - ./https:/https:ro
    depends_on:
      - postgres
      - redis
      - rabbitmq
      - ollama
    networks:
      - living-codex-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: living-codex-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=livingcodex
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - living-codex-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: living-codex-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - living-codex-network
    restart: unless-stopped

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: living-codex-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - living-codex-network
    restart: unless-stopped

  # Ollama LLM Service
  ollama:
    image: ollama/ollama:latest
    container_name: living-codex-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    networks:
      - living-codex-network
    restart: unless-stopped
    # Note: You'll need to pull models manually after container starts
    # docker exec living-codex-ollama ollama pull llama3
    # docker exec living-codex-ollama ollama pull gpt-oss:20b

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: living-codex-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - living-codex-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: living-codex-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - living-codex-network
    restart: unless-stopped

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: living-codex-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - living-codex-network
    restart: unless-stopped

  # Elasticsearch for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: living-codex-elasticsearch
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - living-codex-network
    restart: unless-stopped

  # Kibana for Log Analysis
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: living-codex-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - living-codex-network
    restart: unless-stopped

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: living-codex-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - living-codex-api
    networks:
      - living-codex-network
    restart: unless-stopped

  # Development Tools
  adminer:
    image: adminer:latest
    container_name: living-codex-adminer
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - living-codex-network
    restart: unless-stopped

  # Redis Commander
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: living-codex-redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - living-codex-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  ollama_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  living-codex-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
